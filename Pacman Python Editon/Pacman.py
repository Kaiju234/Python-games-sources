{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pacman.py\n",
    "import copy\n",
    "from board import boards\n",
    "import pygame\n",
    "import math\n",
    "\n",
    "pygame.init()\n",
    "\n",
    "WIDTH = 900\n",
    "HEIGHT = 950\n",
    "screen = pygame\n",
    "timer = pygame.time.Clock()\n",
    "fps = 60\n",
    "font = pygame.font.Font('superscriptbold.tff', 20)\n",
    "level = copy.deepcopy(boards)\n",
    "color = 'blue'\n",
    "PI = math.pi\n",
    "player_images = []\n",
    "for i in range(1,5):\n",
    "    player_images.append(pygame.transform.scale(pygame.image.load(f'assets/player_images/{i}.png'), (45, 45)))\n",
    "blinky_img = pygame.transform.scale(pygame.image.load(f'assets/ghost_images/red.png'), (45, 45))\n",
    "pinky_img = pygame.transform.scale(pygame.image.load(f'assets/ghost_images/pink.png'), (45, 45))\n",
    "inky_img = pygame.transform.scale(pygame.image.load(f'assets/ghost_images/blue.png'), (45, 45))\n",
    "clyde_img = pygame.transform.scale(pygame.image.load(f'assets/ghost_images/orange.png'), (45, 45))\n",
    "spooked_img = pygame.transform.scale(pygame.image.load(f'assets/ghost_images/powerup.png'), (45, 45))\n",
    "dead_img = pygame.transform.scale(pygame.image.load(f'assets/ghost_images/dead.png'), (45, 45))\n",
    "player_x = 450\n",
    "player_y = 663\n",
    "direction = 0\n",
    "blinky_x = 56\n",
    "blinky_y = 58\n",
    "blinky_direction = 0\n",
    "inky_x = 440\n",
    "inky_y = 388\n",
    "inky_direction = 2\n",
    "pinky_x = 440\n",
    "pinky_y = 438\n",
    "pinky_direction = 2\n",
    "clyde_x = 440\n",
    "clyde_y = 438\n",
    "clyde_direction = 2\n",
    "counter = 0\n",
    "flicker = False\n",
    "# R, L, U, D\n",
    "turns_allowed = [False, False, False, False]\n",
    "direction_command = 0\n",
    "score = 0\n",
    "powerup = False\n",
    "power_counter = 0\n",
    "eaten_ghost = [False, False, False, False]\n",
    "targets = [(player_x, player_y), (player_x, player_y), (player_x, player_y), (player_x, player_y)]\n",
    "blinky_dead = False\n",
    "inky_dead = False\n",
    "clyde_dead = False\n",
    "pinky_dead = False\n",
    "blinky_box = False\n",
    "inky_box = False\n",
    "clyde_box = False\n",
    "pinky_box = False\n",
    "moving = False\n",
    "ghost_speeds = [2, 2, 2, 2]\n",
    "startup_counter = 0\n",
    "lives = 3\n",
    "game_over = False\n",
    "game_won = False\n",
    "\n",
    "\n",
    "\n",
    "class Ghost:\n",
    "    def __init__(self, x_coord, y_coord, target, speed, img, direct, dead, box, id):\n",
    "        self.x_pos = x_coord\n",
    "        self.y_pos = y_coord\n",
    "        self.center_x = self.x_pos + 22\n",
    "        self.center_y = self.y_pos + 22\n",
    "        self.target = target\n",
    "        self.speed = speed\n",
    "        self.img = img\n",
    "        self.direction = direct\n",
    "        self.dead = dead\n",
    "        self.in_box = box\n",
    "        self.id = id\n",
    "        self.turns, self.in_box = self.check_collisions()\n",
    "        self.rect = self.draw()\n",
    "\n",
    "    def draw(self):\n",
    "        if (not powerup and not self.dead) or (eaten_ghost[self.id] and powerup and not self.dead):\n",
    "            screen.blit(self.img, (self.x_pos, self.y_pos))\n",
    "        elif powerup and not self.dead and not eaten_ghost[self.id]:\n",
    "            screen.blit(spooked_img, (self.x_pos, self.y_pos))\n",
    "        else:\n",
    "            screen.blit(dead_img, (self.x_pos, self.y_pos))\n",
    "        ghost_rect = pygame.rect.Rect((self.center_x - 18, self.center_y - 18), (36, 36))\n",
    "        return ghost_rect\n",
    "\n",
    "    def check_collisions(self):\n",
    "        # R, L, U, D\n",
    "        num1 = ((HEIGHT - 50) // 32)\n",
    "        num2 = (WIDTH // 30)\n",
    "        num3 = 15\n",
    "        self.turns = [False, False, False, False]\n",
    "        if 0 < self.center_x // 30 < 29:\n",
    "            if level[(self.center_y - num3) // num1][self.center_x // num2] == 9:\n",
    "                self.turns[2] = True\n",
    "            if level[self.center_y // num1][(self.center_x - num3) // num2] < 3 \\\n",
    "                    or (level[self.center_y // num1][(self.center_x - num3) // num2] == 9 and (\n",
    "                    self.in_box or self.dead)):\n",
    "                self.turns[1] = True\n",
    "            if level[self.center_y // num1][(self.center_x + num3) // num2] < 3 \\\n",
    "                    or (level[self.center_y // num1][(self.center_x + num3) // num2] == 9 and (\n",
    "                    self.in_box or self.dead)):\n",
    "                self.turns[0] = True\n",
    "            if level[(self.center_y + num3) // num1][self.center_x // num2] < 3 \\\n",
    "                    or (level[(self.center_y + num3) // num1][self.center_x // num2] == 9 and (\n",
    "                    self.in_box or self.dead)):\n",
    "                self.turns[3] = True\n",
    "            if level[(self.center_y - num3) // num1][self.center_x // num2] < 3 \\\n",
    "                    or (level[(self.center_y - num3) // num1][self.center_x // num2] == 9 and (\n",
    "                    self.in_box or self.dead)):\n",
    "                self.turns[2] = True\n",
    "\n",
    "            if self.direction == 2 or self.direction == 3:\n",
    "                if 12 <= self.center_x % num2 <= 18:\n",
    "                    if level[(self.center_y + num3) // num1][self.center_x // num2] < 3 \\\n",
    "                            or (level[(self.center_y + num3) // num1][self.center_x // num2] == 9 and (\n",
    "                            self.in_box or self.dead)):\n",
    "                        self.turns[3] = True\n",
    "                    if level[(self.center_y - num3) // num1][self.center_x // num2] < 3 \\\n",
    "                            or (level[(self.center_y - num3) // num1][self.center_x // num2] == 9 and (\n",
    "                            self.in_box or self.dead)):\n",
    "                        self.turns[2] = True\n",
    "                if 12 <= self.center_y % num1 <= 18:\n",
    "                    if level[self.center_y // num1][(self.center_x - num2) // num2] < 3 \\\n",
    "                            or (level[self.center_y // num1][(self.center_x - num2) // num2] == 9 and (\n",
    "                            self.in_box or self.dead)):\n",
    "                        self.turns[1] = True\n",
    "                    if level[self.center_y // num1][(self.center_x + num2) // num2] < 3 \\\n",
    "                            or (level[self.center_y // num1][(self.center_x + num2) // num2] == 9 and (\n",
    "                            self.in_box or self.dead)):\n",
    "                        self.turns[0] = True\n",
    "\n",
    "            if self.direction == 0 or self.direction == 1:\n",
    "                if 12 <= self.center_x % num2 <= 18:\n",
    "                    if level[(self.center_y + num3) // num1][self.center_x // num2] < 3 \\\n",
    "                            or (level[(self.center_y + num3) // num1][self.center_x // num2] == 9 and (\n",
    "                            self.in_box or self.dead)):\n",
    "                        self.turns[3] = True\n",
    "                    if level[(self.center_y - num3) // num1][self.center_x // num2] < 3 \\\n",
    "                            or (level[(self.center_y - num3) // num1][self.center_x // num2] == 9 and (\n",
    "                            self.in_box or self.dead)):\n",
    "                        self.turns[2] = True\n",
    "                if 12 <= self.center_y % num1 <= 18:\n",
    "                    if level[self.center_y // num1][(self.center_x - num3) // num2] < 3 \\\n",
    "                            or (level[self.center_y // num1][(self.center_x - num3) // num2] == 9 and (\n",
    "                            self.in_box or self.dead)):\n",
    "                        self.turns[1] = True\n",
    "                    if level[self.center_y // num1][(self.center_x + num3) // num2] < 3 \\\n",
    "                            or (level[self.center_y // num1][(self.center_x + num3) // num2] == 9 and (\n",
    "                            self.in_box or self.dead)):\n",
    "                        self.turns[0] = True\n",
    "        else:\n",
    "            self.turns[0] = True\n",
    "            self.turns[1] = True\n",
    "        if 350 < self.x_pos < 550 and 370 < self.y_pos < 480:\n",
    "            self.in_box = True\n",
    "        else:\n",
    "            self.in_box = False\n",
    "        return self.turns, self.in_box\n",
    "\n",
    "    def move_clyde(self):\n",
    "        # r, l, u, d\n",
    "        # clyde is going to turn whenever advantageous for pursuit\n",
    "        if self.direction == 0:\n",
    "            if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                self.x_pos += self.speed\n",
    "            elif not self.turns[0]:\n",
    "                if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "            elif self.turns[0]:\n",
    "                if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                if self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                else:\n",
    "                    self.x_pos += self.speed\n",
    "        elif self.direction == 1:\n",
    "            if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                self.direction = 3\n",
    "            elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                self.x_pos -= self.speed\n",
    "            elif not self.turns[1]:\n",
    "                if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "            elif self.turns[1]:\n",
    "                if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                if self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                else:\n",
    "                    self.x_pos -= self.speed\n",
    "        elif self.direction == 2:\n",
    "            if self.target[0] < self.x_pos and self.turns[1]:\n",
    "                self.direction = 1\n",
    "                self.x_pos -= self.speed\n",
    "            elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                self.direction = 2\n",
    "                self.y_pos -= self.speed\n",
    "            elif not self.turns[2]:\n",
    "                if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "            elif self.turns[2]:\n",
    "                if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                else:\n",
    "                    self.y_pos -= self.speed\n",
    "        elif self.direction == 3:\n",
    "            if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                self.y_pos += self.speed\n",
    "            elif not self.turns[3]:\n",
    "                if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "            elif self.turns[3]:\n",
    "                if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                else:\n",
    "                    self.y_pos += self.speed\n",
    "        if self.x_pos < -30:\n",
    "            self.x_pos = 900\n",
    "        elif self.x_pos > 900:\n",
    "            self.x_pos - 30\n",
    "        return self.x_pos, self.y_pos, self.direction\n",
    "\n",
    "    def move_blinky(self):\n",
    "        # r, l, u, d\n",
    "        # blinky is going to turn whenever colliding with walls, otherwise continue straight\n",
    "        if self.direction == 0:\n",
    "            if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                self.x_pos += self.speed\n",
    "            elif not self.turns[0]:\n",
    "                if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "            elif self.turns[0]:\n",
    "                self.x_pos += self.speed\n",
    "        elif self.direction == 1:\n",
    "            if self.target[0] < self.x_pos and self.turns[1]:\n",
    "                self.x_pos -= self.speed\n",
    "            elif not self.turns[1]:\n",
    "                if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "            elif self.turns[1]:\n",
    "                self.x_pos -= self.speed\n",
    "        elif self.direction == 2:\n",
    "            if self.target[1] < self.y_pos and self.turns[2]:\n",
    "                self.direction = 2\n",
    "                self.y_pos -= self.speed\n",
    "            elif not self.turns[2]:\n",
    "                if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "            elif self.turns[2]:\n",
    "                self.y_pos -= self.speed\n",
    "        elif self.direction == 3:\n",
    "            if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                self.y_pos += self.speed\n",
    "            elif not self.turns[3]:\n",
    "                if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "            elif self.turns[3]:\n",
    "                self.y_pos += self.speed\n",
    "        if self.x_pos < -30:\n",
    "            self.x_pos = 900\n",
    "        elif self.x_pos > 900:\n",
    "            self.x_pos - 30\n",
    "        return self.x_pos, self.y_pos, self.direction\n",
    "\n",
    "    def move_inky(self):\n",
    "        # r, l, u, d\n",
    "        # inky turns up or down at any point to pursue, but left and right only on collision\n",
    "        if self.direction == 0:\n",
    "            if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                self.x_pos += self.speed\n",
    "            elif not self.turns[0]:\n",
    "                if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "            elif self.turns[0]:\n",
    "                if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                if self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                else:\n",
    "                    self.x_pos += self.speed\n",
    "        elif self.direction == 1:\n",
    "            if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                self.direction = 3\n",
    "            elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                self.x_pos -= self.speed\n",
    "            elif not self.turns[1]:\n",
    "                if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "            elif self.turns[1]:\n",
    "                if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                if self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                else:\n",
    "                    self.x_pos -= self.speed\n",
    "        elif self.direction == 2:\n",
    "            if self.target[1] < self.y_pos and self.turns[2]:\n",
    "                self.direction = 2\n",
    "                self.y_pos -= self.speed\n",
    "            elif not self.turns[2]:\n",
    "                if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "            elif self.turns[2]:\n",
    "                self.y_pos -= self.speed\n",
    "        elif self.direction == 3:\n",
    "            if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                self.y_pos += self.speed\n",
    "            elif not self.turns[3]:\n",
    "                if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "            elif self.turns[3]:\n",
    "                self.y_pos += self.speed\n",
    "        if self.x_pos < -30:\n",
    "            self.x_pos = 900\n",
    "        elif self.x_pos > 900:\n",
    "            self.x_pos - 30\n",
    "        return self.x_pos, self.y_pos, self.direction\n",
    "\n",
    "    def move_pinky(self):\n",
    "        # r, l, u, d\n",
    "        # inky is going to turn left or right whenever advantageous, but only up or down on collision\n",
    "        if self.direction == 0:\n",
    "            if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                self.x_pos += self.speed\n",
    "            elif not self.turns[0]:\n",
    "                if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "            elif self.turns[0]:\n",
    "                self.x_pos += self.speed\n",
    "        elif self.direction == 1:\n",
    "            if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                self.direction = 3\n",
    "            elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                self.x_pos -= self.speed\n",
    "            elif not self.turns[1]:\n",
    "                if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "            elif self.turns[1]:\n",
    "                self.x_pos -= self.speed\n",
    "        elif self.direction == 2:\n",
    "            if self.target[0] < self.x_pos and self.turns[1]:\n",
    "                self.direction = 1\n",
    "                self.x_pos -= self.speed\n",
    "            elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                self.direction = 2\n",
    "                self.y_pos -= self.speed\n",
    "            elif not self.turns[2]:\n",
    "                if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.target[1] > self.y_pos and self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.turns[3]:\n",
    "                    self.direction = 3\n",
    "                    self.y_pos += self.speed\n",
    "                elif self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "            elif self.turns[2]:\n",
    "                if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                else:\n",
    "                    self.y_pos -= self.speed\n",
    "        elif self.direction == 3:\n",
    "            if self.target[1] > self.y_pos and self.turns[3]:\n",
    "                self.y_pos += self.speed\n",
    "            elif not self.turns[3]:\n",
    "                if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.target[1] < self.y_pos and self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[2]:\n",
    "                    self.direction = 2\n",
    "                    self.y_pos -= self.speed\n",
    "                elif self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                elif self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "            elif self.turns[3]:\n",
    "                if self.target[0] > self.x_pos and self.turns[0]:\n",
    "                    self.direction = 0\n",
    "                    self.x_pos += self.speed\n",
    "                elif self.target[0] < self.x_pos and self.turns[1]:\n",
    "                    self.direction = 1\n",
    "                    self.x_pos -= self.speed\n",
    "                else:\n",
    "                    self.y_pos += self.speed\n",
    "        if self.x_pos < -30:\n",
    "            self.x_pos = 900\n",
    "        elif self.x_pos > 900:\n",
    "            self.x_pos - 30\n",
    "        return self.x_pos, self.y_pos, self.direction\n",
    "\n",
    "\n",
    "def draw_misc():\n",
    "    score_text = font.render(f'Score: {score}', True, 'white')\n",
    "    screen.blit(score_text, (10, 920))\n",
    "    if powerup:\n",
    "        pygame.draw.circle(screen, 'blue', (140, 930), 15)\n",
    "    for i in range(lives):\n",
    "        screen.blit(pygame.transform.scale(player_images[0], (30, 30)), (650 + i * 40, 915))\n",
    "    if game_over:\n",
    "        pygame.draw.rect(screen, 'white', [50, 200, 800, 300],0, 10)\n",
    "        pygame.draw.rect(screen, 'dark gray', [70, 220, 760, 260], 0, 10)\n",
    "        gameover_text = font.render('Game over! Space bar to restart!', True, 'red')\n",
    "        screen.blit(gameover_text, (100, 300))\n",
    "    if game_won:\n",
    "        pygame.draw.rect(screen, 'white', [50, 200, 800, 300],0, 10)\n",
    "        pygame.draw.rect(screen, 'dark gray', [70, 220, 760, 260], 0, 10)\n",
    "        gameover_text = font.render('Victory! Space bar to restart!', True, 'green')\n",
    "        screen.blit(gameover_text, (100, 300))\n",
    "\n",
    "\n",
    "def check_collisions(scor, power, power_count, eaten_ghosts):\n",
    "    num1 = (HEIGHT - 50) // 32\n",
    "    num2 = WIDTH // 30\n",
    "    if 0 < player_x < 870:\n",
    "        if level[center_y // num1][center_x // num2] == 1:\n",
    "            level[center_y // num1][center_x // num2] = 0\n",
    "            scor += 10\n",
    "        if level[center_y // num1][center_x // num2] == 2:\n",
    "            level[center_y // num1][center_x // num2] = 0\n",
    "            scor += 50\n",
    "            power = True\n",
    "            power_count = 0\n",
    "            eaten_ghosts = [False, False, False, False]\n",
    "    return scor, power, power_count, eaten_ghosts\n",
    "\n",
    "\n",
    "def draw_board():\n",
    "    num1 = ((HEIGHT - 50) // 32)\n",
    "    num2 = (WIDTH // 30)\n",
    "    for i in range(len(level)):\n",
    "        for j in range(len(level[i])):\n",
    "            if level[i][j] == 1:\n",
    "                pygame.draw.circle(screen, 'white', (j * num2 + (0.5 * num2), i * num1 + (0.5 * num1)), 4)\n",
    "            if level[i][j] == 2 and not flicker:\n",
    "                pygame.draw.circle(screen, 'white', (j * num2 + (0.5 * num2), i * num1 + (0.5 * num1)), 10)\n",
    "            if level[i][j] == 3:\n",
    "                pygame.draw.line(screen, color, (j * num2 + (0.5 * num2), i * num1),\n",
    "                                 (j * num2 + (0.5 * num2), i * num1 + num1), 3)\n",
    "            if level[i][j] == 4:\n",
    "                pygame.draw.line(screen, color, (j * num2, i * num1 + (0.5 * num1)),\n",
    "                                 (j * num2 + num2, i * num1 + (0.5 * num1)), 3)\n",
    "            if level[i][j] == 5:\n",
    "                pygame.draw.arc(screen, color, [(j * num2 - (num2 * 0.4)) - 2, (i * num1 + (0.5 * num1)), num2, num1],\n",
    "                                0, PI / 2, 3)\n",
    "            if level[i][j] == 6:\n",
    "                pygame.draw.arc(screen, color,\n",
    "                                [(j * num2 + (num2 * 0.5)), (i * num1 + (0.5 * num1)), num2, num1], PI / 2, PI, 3)\n",
    "            if level[i][j] == 7:\n",
    "                pygame.draw.arc(screen, color, [(j * num2 + (num2 * 0.5)), (i * num1 - (0.4 * num1)), num2, num1], PI,\n",
    "                                3 * PI / 2, 3)\n",
    "            if level[i][j] == 8:\n",
    "                pygame.draw.arc(screen, color,\n",
    "                                [(j * num2 - (num2 * 0.4)) - 2, (i * num1 - (0.4 * num1)), num2, num1], 3 * PI / 2,\n",
    "                                2 * PI, 3)\n",
    "            if level[i][j] == 9:\n",
    "                pygame.draw.line(screen, 'white', (j * num2, i * num1 + (0.5 * num1)),\n",
    "                                 (j * num2 + num2, i * num1 + (0.5 * num1)), 3)\n",
    "\n",
    "\n",
    "def draw_player():\n",
    "    # 0-RIGHT, 1-LEFT, 2-UP, 3-DOWN\n",
    "    if direction == 0:\n",
    "        screen.blit(player_images[counter // 5], (player_x, player_y))\n",
    "    elif direction == 1:\n",
    "        screen.blit(pygame.transform.flip(player_images[counter // 5], True, False), (player_x, player_y))\n",
    "    elif direction == 2:\n",
    "        screen.blit(pygame.transform.rotate(player_images[counter // 5], 90), (player_x, player_y))\n",
    "    elif direction == 3:\n",
    "        screen.blit(pygame.transform.rotate(player_images[counter // 5], 270), (player_x, player_y))\n",
    "\n",
    "\n",
    "def check_position(centerx, centery):\n",
    "    turns = [False, False, False, False]\n",
    "    num1 = (HEIGHT - 50) // 32\n",
    "    num2 = (WIDTH // 30)\n",
    "    num3 = 15\n",
    "    # check collisions based on center x and center y of player +/- fudge number\n",
    "    if centerx // 30 < 29:\n",
    "        if direction == 0:\n",
    "            if level[centery // num1][(centerx - num3) // num2] < 3:\n",
    "                turns[1] = True\n",
    "        if direction == 1:\n",
    "            if level[centery // num1][(centerx + num3) // num2] < 3:\n",
    "                turns[0] = True\n",
    "        if direction == 2:\n",
    "            if level[(centery + num3) // num1][centerx // num2] < 3:\n",
    "                turns[3] = True\n",
    "        if direction == 3:\n",
    "            if level[(centery - num3) // num1][centerx // num2] < 3:\n",
    "                turns[2] = True\n",
    "\n",
    "        if direction == 2 or direction == 3:\n",
    "            if 12 <= centerx % num2 <= 18:\n",
    "                if level[(centery + num3) // num1][centerx // num2] < 3:\n",
    "                    turns[3] = True\n",
    "                if level[(centery - num3) // num1][centerx // num2] < 3:\n",
    "                    turns[2] = True\n",
    "            if 12 <= centery % num1 <= 18:\n",
    "                if level[centery // num1][(centerx - num2) // num2] < 3:\n",
    "                    turns[1] = True\n",
    "                if level[centery // num1][(centerx + num2) // num2] < 3:\n",
    "                    turns[0] = True\n",
    "        if direction == 0 or direction == 1:\n",
    "            if 12 <= centerx % num2 <= 18:\n",
    "                if level[(centery + num1) // num1][centerx // num2] < 3:\n",
    "                    turns[3] = True\n",
    "                if level[(centery - num1) // num1][centerx // num2] < 3:\n",
    "                    turns[2] = True\n",
    "            if 12 <= centery % num1 <= 18:\n",
    "                if level[centery // num1][(centerx - num3) // num2] < 3:\n",
    "                    turns[1] = True\n",
    "                if level[centery // num1][(centerx + num3) // num2] < 3:\n",
    "                    turns[0] = True\n",
    "    else:\n",
    "        turns[0] = True\n",
    "        turns[1] = True\n",
    "\n",
    "    return turns\n",
    "\n",
    "\n",
    "def move_player(play_x, play_y):\n",
    "    # r, l, u, d\n",
    "    if direction == 0 and turns_allowed[0]:\n",
    "        play_x += player_speed\n",
    "    elif direction == 1 and turns_allowed[1]:\n",
    "        play_x -= player_speed\n",
    "    if direction == 2 and turns_allowed[2]:\n",
    "        play_y -= player_speed\n",
    "    elif direction == 3 and turns_allowed[3]:\n",
    "        play_y += player_speed\n",
    "    return play_x, play_y\n",
    "\n",
    "\n",
    "def get_targets(blink_x, blink_y, ink_x, ink_y, pink_x, pink_y, clyd_x, clyd_y):\n",
    "    if player_x < 450:\n",
    "        runaway_x = 900\n",
    "    else:\n",
    "        runaway_x = 0\n",
    "    if player_y < 450:\n",
    "        runaway_y = 900\n",
    "    else:\n",
    "        runaway_y = 0\n",
    "    return_target = (380, 400)\n",
    "    if powerup:\n",
    "        if not blinky.dead and not eaten_ghost[0]:\n",
    "            blink_target = (runaway_x, runaway_y)\n",
    "        elif not blinky.dead and eaten_ghost[0]:\n",
    "            if 340 < blink_x < 560 and 340 < blink_y < 500:\n",
    "                blink_target = (400, 100)\n",
    "            else:\n",
    "                blink_target = (player_x, player_y)\n",
    "        else:\n",
    "            blink_target = return_target\n",
    "        if not inky.dead and not eaten_ghost[1]:\n",
    "            ink_target = (runaway_x, player_y)\n",
    "        elif not inky.dead and eaten_ghost[1]:\n",
    "            if 340 < ink_x < 560 and 340 < ink_y < 500:\n",
    "                ink_target = (400, 100)\n",
    "            else:\n",
    "                ink_target = (player_x, player_y)\n",
    "        else:\n",
    "            ink_target = return_target\n",
    "        if not pinky.dead:\n",
    "            pink_target = (player_x, runaway_y)\n",
    "        elif not pinky.dead and eaten_ghost[2]:\n",
    "            if 340 < pink_x < 560 and 340 < pink_y < 500:\n",
    "                pink_target = (400, 100)\n",
    "            else:\n",
    "                pink_target = (player_x, player_y)\n",
    "        else:\n",
    "            pink_target = return_target\n",
    "        if not clyde.dead and not eaten_ghost[3]:\n",
    "            clyd_target = (450, 450)\n",
    "        elif not clyde.dead and eaten_ghost[3]:\n",
    "            if 340 < clyd_x < 560 and 340 < clyd_y < 500:\n",
    "                clyd_target = (400, 100)\n",
    "            else:\n",
    "                clyd_target = (player_x, player_y)\n",
    "        else:\n",
    "            clyd_target = return_target\n",
    "    else:\n",
    "        if not blinky.dead:\n",
    "            if 340 < blink_x < 560 and 340 < blink_y < 500:\n",
    "                blink_target = (400, 100)\n",
    "            else:\n",
    "                blink_target = (player_x, player_y)\n",
    "        else:\n",
    "            blink_target = return_target\n",
    "        if not inky.dead:\n",
    "            if 340 < ink_x < 560 and 340 < ink_y < 500:\n",
    "                ink_target = (400, 100)\n",
    "            else:\n",
    "                ink_target = (player_x, player_y)\n",
    "        else:\n",
    "            ink_target = return_target\n",
    "        if not pinky.dead:\n",
    "            if 340 < pink_x < 560 and 340 < pink_y < 500:\n",
    "                pink_target = (400, 100)\n",
    "            else:\n",
    "                pink_target = (player_x, player_y)\n",
    "        else:\n",
    "            pink_target = return_target\n",
    "        if not clyde.dead:\n",
    "            if 340 < clyd_x < 560 and 340 < clyd_y < 500:\n",
    "                clyd_target = (400, 100)\n",
    "            else:\n",
    "                clyd_target = (player_x, player_y)\n",
    "        else:\n",
    "            clyd_target = return_target\n",
    "    return [blink_target, ink_target, pink_target, clyd_target]\n",
    "\n",
    "\n",
    "run = True\n",
    "while run:\n",
    "    timer.tick(fps)\n",
    "    if counter < 19:\n",
    "        counter += 1\n",
    "        if counter > 3:\n",
    "            flicker = False\n",
    "    else:\n",
    "        counter = 0\n",
    "        flicker = True\n",
    "    if powerup and power_counter < 600:\n",
    "        power_counter += 1\n",
    "    elif powerup and power_counter >= 600:\n",
    "        power_counter = 0\n",
    "        powerup = False\n",
    "        eaten_ghost = [False, False, False, False]\n",
    "    if startup_counter < 180 and not game_over and not game_won:\n",
    "        moving = False\n",
    "        startup_counter += 1\n",
    "    else:\n",
    "        moving = True\n",
    "\n",
    "    screen.fill('black')\n",
    "    draw_board()\n",
    "    center_x = player_x + 23\n",
    "    center_y = player_y + 24\n",
    "    if powerup:\n",
    "        ghost_speeds = [1, 1, 1, 1]\n",
    "    else:\n",
    "        ghost_speeds = [2, 2, 2, 2]\n",
    "    if eaten_ghost[0]:\n",
    "        ghost_speeds[0] = 2\n",
    "    if eaten_ghost[1]:\n",
    "        ghost_speeds[1] = 2\n",
    "    if eaten_ghost[2]:\n",
    "        ghost_speeds[2] = 2\n",
    "    if eaten_ghost[3]:\n",
    "        ghost_speeds[3] = 2\n",
    "    if blinky_dead:\n",
    "        ghost_speeds[0] = 4\n",
    "    if inky_dead:\n",
    "        ghost_speeds[1] = 4\n",
    "    if pinky_dead:\n",
    "        ghost_speeds[2] = 4\n",
    "    if clyde_dead:\n",
    "        ghost_speeds[3] = 4\n",
    "\n",
    "    game_won = True\n",
    "    for i in range(len(level)):\n",
    "        if 1 in level[i] or 2 in level[i]:\n",
    "            game_won = False\n",
    "\n",
    "    player_circle = pygame.draw.circle(screen, 'black', (center_x, center_y), 20, 2)\n",
    "    draw_player()\n",
    "    blinky = Ghost(blinky_x, blinky_y, targets[0], ghost_speeds[0], blinky_img, blinky_direction, blinky_dead,\n",
    "                   blinky_box, 0)\n",
    "    inky = Ghost(inky_x, inky_y, targets[1], ghost_speeds[1], inky_img, inky_direction, inky_dead,\n",
    "                 inky_box, 1)\n",
    "    pinky = Ghost(pinky_x, pinky_y, targets[2], ghost_speeds[2], pinky_img, pinky_direction, pinky_dead,\n",
    "                  pinky_box, 2)\n",
    "    clyde = Ghost(clyde_x, clyde_y, targets[3], ghost_speeds[3], clyde_img, clyde_direction, clyde_dead,\n",
    "                  clyde_box, 3)\n",
    "    draw_misc()\n",
    "    targets = get_targets(blinky_x, blinky_y, inky_x, inky_y, pinky_x, pinky_y, clyde_x, clyde_y)\n",
    "\n",
    "    turns_allowed = check_position(center_x, center_y)\n",
    "    if moving:\n",
    "        player_x, player_y = move_player(player_x, player_y)\n",
    "        if not blinky_dead and not blinky.in_box:\n",
    "            blinky_x, blinky_y, blinky_direction = blinky.move_blinky()\n",
    "        else:\n",
    "            blinky_x, blinky_y, blinky_direction = blinky.move_clyde()\n",
    "        if not pinky_dead and not pinky.in_box:\n",
    "            pinky_x, pinky_y, pinky_direction = pinky.move_pinky()\n",
    "        else:\n",
    "            pinky_x, pinky_y, pinky_direction = pinky.move_clyde()\n",
    "        if not inky_dead and not inky.in_box:\n",
    "            inky_x, inky_y, inky_direction = inky.move_inky()\n",
    "        else:\n",
    "            inky_x, inky_y, inky_direction = inky.move_clyde()\n",
    "        clyde_x, clyde_y, clyde_direction = clyde.move_clyde()\n",
    "    score, powerup, power_counter, eaten_ghost = check_collisions(score, powerup, power_counter, eaten_ghost)\n",
    "    # add to if not powerup to check if eaten ghosts\n",
    "    if not powerup:\n",
    "        if (player_circle.colliderect(blinky.rect) and not blinky.dead) or \\\n",
    "                (player_circle.colliderect(inky.rect) and not inky.dead) or \\\n",
    "                (player_circle.colliderect(pinky.rect) and not pinky.dead) or \\\n",
    "                (player_circle.colliderect(clyde.rect) and not clyde.dead):\n",
    "            if lives > 0:\n",
    "                lives -= 1\n",
    "                startup_counter = 0\n",
    "                powerup = False\n",
    "                power_counter = 0\n",
    "                player_x = 450\n",
    "                player_y = 663\n",
    "                direction = 0\n",
    "                direction_command = 0\n",
    "                blinky_x = 56\n",
    "                blinky_y = 58\n",
    "                blinky_direction = 0\n",
    "                inky_x = 440\n",
    "                inky_y = 388\n",
    "                inky_direction = 2\n",
    "                pinky_x = 440\n",
    "                pinky_y = 438\n",
    "                pinky_direction = 2\n",
    "                clyde_x = 440\n",
    "                clyde_y = 438\n",
    "                clyde_direction = 2\n",
    "                eaten_ghost = [False, False, False, False]\n",
    "                blinky_dead = False\n",
    "                inky_dead = False\n",
    "                clyde_dead = False\n",
    "                pinky_dead = False\n",
    "            else:\n",
    "                game_over = True\n",
    "                moving = False\n",
    "                startup_counter = 0\n",
    "    if powerup and player_circle.colliderect(blinky.rect) and eaten_ghost[0] and not blinky.dead:\n",
    "        if lives > 0:\n",
    "            powerup = False\n",
    "            power_counter = 0\n",
    "            lives -= 1\n",
    "            startup_counter = 0\n",
    "            player_x = 450\n",
    "            player_y = 663\n",
    "            direction = 0\n",
    "            direction_command = 0\n",
    "            blinky_x = 56\n",
    "            blinky_y = 58\n",
    "            blinky_direction = 0\n",
    "            inky_x = 440\n",
    "            inky_y = 388\n",
    "            inky_direction = 2\n",
    "            pinky_x = 440\n",
    "            pinky_y = 438\n",
    "            pinky_direction = 2\n",
    "            clyde_x = 440\n",
    "            clyde_y = 438\n",
    "            clyde_direction = 2\n",
    "            eaten_ghost = [False, False, False, False]\n",
    "            blinky_dead = False\n",
    "            inky_dead = False\n",
    "            clyde_dead = False\n",
    "            pinky_dead = False\n",
    "        else:\n",
    "            game_over = True\n",
    "            moving = False\n",
    "            startup_counter = 0\n",
    "    if powerup and player_circle.colliderect(inky.rect) and eaten_ghost[1] and not inky.dead:\n",
    "        if lives > 0:\n",
    "            powerup = False\n",
    "            power_counter = 0\n",
    "            lives -= 1\n",
    "            startup_counter = 0\n",
    "            player_x = 450\n",
    "            player_y = 663\n",
    "            direction = 0\n",
    "            direction_command = 0\n",
    "            blinky_x = 56\n",
    "            blinky_y = 58\n",
    "            blinky_direction = 0\n",
    "            inky_x = 440\n",
    "            inky_y = 388\n",
    "            inky_direction = 2\n",
    "            pinky_x = 440\n",
    "            pinky_y = 438\n",
    "            pinky_direction = 2\n",
    "            clyde_x = 440\n",
    "            clyde_y = 438\n",
    "            clyde_direction = 2\n",
    "            eaten_ghost = [False, False, False, False]\n",
    "            blinky_dead = False\n",
    "            inky_dead = False\n",
    "            clyde_dead = False\n",
    "            pinky_dead = False\n",
    "        else:\n",
    "            game_over = True\n",
    "            moving = False\n",
    "            startup_counter = 0\n",
    "    if powerup and player_circle.colliderect(pinky.rect) and eaten_ghost[2] and not pinky.dead:\n",
    "        if lives > 0:\n",
    "            powerup = False\n",
    "            power_counter = 0\n",
    "            lives -= 1\n",
    "            startup_counter = 0\n",
    "            player_x = 450\n",
    "            player_y = 663\n",
    "            direction = 0\n",
    "            direction_command = 0\n",
    "            blinky_x = 56\n",
    "            blinky_y = 58\n",
    "            blinky_direction = 0\n",
    "            inky_x = 440\n",
    "            inky_y = 388\n",
    "            inky_direction = 2\n",
    "            pinky_x = 440\n",
    "            pinky_y = 438\n",
    "            pinky_direction = 2\n",
    "            clyde_x = 440\n",
    "            clyde_y = 438\n",
    "            clyde_direction = 2\n",
    "            eaten_ghost = [False, False, False, False]\n",
    "            blinky_dead = False\n",
    "            inky_dead = False\n",
    "            clyde_dead = False\n",
    "            pinky_dead = False\n",
    "        else:\n",
    "            game_over = True\n",
    "            moving = False\n",
    "            startup_counter = 0\n",
    "    if powerup and player_circle.colliderect(clyde.rect) and eaten_ghost[3] and not clyde.dead:\n",
    "        if lives > 0:\n",
    "            powerup = False\n",
    "            power_counter = 0\n",
    "            lives -= 1\n",
    "            startup_counter = 0\n",
    "            player_x = 450\n",
    "            player_y = 663\n",
    "            direction = 0\n",
    "            direction_command = 0\n",
    "            blinky_x = 56\n",
    "            blinky_y = 58\n",
    "            blinky_direction = 0\n",
    "            inky_x = 440\n",
    "            inky_y = 388\n",
    "            inky_direction = 2\n",
    "            pinky_x = 440\n",
    "            pinky_y = 438\n",
    "            pinky_direction = 2\n",
    "            clyde_x = 440\n",
    "            clyde_y = 438\n",
    "            clyde_direction = 2\n",
    "            eaten_ghost = [False, False, False, False]\n",
    "            blinky_dead = False\n",
    "            inky_dead = False\n",
    "            clyde_dead = False\n",
    "            pinky_dead = False\n",
    "        else:\n",
    "            game_over = True\n",
    "            moving = False\n",
    "            startup_counter = 0\n",
    "    if powerup and player_circle.colliderect(blinky.rect) and not blinky.dead and not eaten_ghost[0]:\n",
    "        blinky_dead = True\n",
    "        eaten_ghost[0] = True\n",
    "        score += (2 ** eaten_ghost.count(True)) * 100\n",
    "    if powerup and player_circle.colliderect(inky.rect) and not inky.dead and not eaten_ghost[1]:\n",
    "        inky_dead = True\n",
    "        eaten_ghost[1] = True\n",
    "        score += (2 ** eaten_ghost.count(True)) * 100\n",
    "    if powerup and player_circle.colliderect(pinky.rect) and not pinky.dead and not eaten_ghost[2]:\n",
    "        pinky_dead = True\n",
    "        eaten_ghost[2] = True\n",
    "        score += (2 ** eaten_ghost.count(True)) * 100\n",
    "    if powerup and player_circle.colliderect(clyde.rect) and not clyde.dead and not eaten_ghost[3]:\n",
    "        clyde_dead = True\n",
    "        eaten_ghost[3] = True\n",
    "        score += (2 ** eaten_ghost.count(True)) * 100\n",
    "\n",
    "    for event in pygame.event.get():\n",
    "        if event.type == pygame.QUIT:\n",
    "            run = False\n",
    "        if event.type == pygame.KEYDOWN:\n",
    "            if event.key == pygame.K_RIGHT:\n",
    "                direction_command = 0\n",
    "            if event.key == pygame.K_LEFT:\n",
    "                direction_command = 1\n",
    "            if event.key == pygame.K_UP:\n",
    "                direction_command = 2\n",
    "            if event.key == pygame.K_DOWN:\n",
    "                direction_command = 3\n",
    "            if event.key == pygame.K_SPACE and (game_over or game_won):\n",
    "                powerup = False\n",
    "                power_counter = 0\n",
    "                lives -= 1\n",
    "                startup_counter = 0\n",
    "                player_x = 450\n",
    "                player_y = 663\n",
    "                direction = 0\n",
    "                direction_command = 0\n",
    "                blinky_x = 56\n",
    "                blinky_y = 58\n",
    "                blinky_direction = 0\n",
    "                inky_x = 440\n",
    "                inky_y = 388\n",
    "                inky_direction = 2\n",
    "                pinky_x = 440\n",
    "                pinky_y = 438\n",
    "                pinky_direction = 2\n",
    "                clyde_x = 440\n",
    "                clyde_y = 438\n",
    "                clyde_direction = 2\n",
    "                eaten_ghost = [False, False, False, False]\n",
    "                blinky_dead = False\n",
    "                inky_dead = False\n",
    "                clyde_dead = False\n",
    "                pinky_dead = False\n",
    "                score = 0\n",
    "                lives = 3\n",
    "                level = copy.deepcopy(boards)\n",
    "                game_over = False\n",
    "                game_won = False\n",
    "\n",
    "        if event.type == pygame.KEYUP:\n",
    "            if event.key == pygame.K_RIGHT and direction_command == 0:\n",
    "                direction_command = direction\n",
    "            if event.key == pygame.K_LEFT and direction_command == 1:\n",
    "                direction_command = direction\n",
    "            if event.key == pygame.K_UP and direction_command == 2:\n",
    "                direction_command = direction\n",
    "            if event.key == pygame.K_DOWN and direction_command == 3:\n",
    "                direction_command = direction\n",
    "\n",
    "    if direction_command == 0 and turns_allowed[0]:\n",
    "        direction = 0\n",
    "    if direction_command == 1 and turns_allowed[1]:\n",
    "        direction = 1\n",
    "    if direction_command == 2 and turns_allowed[2]:\n",
    "        direction = 2\n",
    "    if direction_command == 3 and turns_allowed[3]:\n",
    "        direction = 3\n",
    "\n",
    "    if player_x > 900:\n",
    "        player_x = -47\n",
    "    elif player_x < -50:\n",
    "        player_x = 897\n",
    "\n",
    "    if blinky.in_box and blinky_dead:\n",
    "        blinky_dead = False\n",
    "    if inky.in_box and inky_dead:\n",
    "        inky_dead = False\n",
    "    if pinky.in_box and pinky_dead:\n",
    "        pinky_dead = False\n",
    "    if clyde.in_box and clyde_dead:\n",
    "        clyde_dead = False\n",
    "\n",
    "    pygame.display.flip()\n",
    "pygame.quit()\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
